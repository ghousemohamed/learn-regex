package data

import "github.com/ghousemohamed/regex-in-the-terminal/models"

func GetLessons() []models.Lesson {
	return []models.Lesson{
		{
			Title:       "Basic Patterns",
			Description: "Simple character matching is the foundation of regex. Letters and numbers match themselves exactly.\n\nTest text:\ncat\ndog\ncat food\ncats",
			Task:        "Write a pattern that matches exactly the word 'cat'",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "cats", Expected: false},
				{Text: "cat food", Expected: false},
				{Text: "dog", Expected: false},
			},
		},
		{
			Title:       "The Dot Metacharacter",
			Description: "The dot (.) matches any single character except newline.\n\nTest text:\ncat\ncot\ncut\ncart\nct",
			Task:        "Write a pattern that matches 'cat', 'cot', and 'cut'",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "cot", Expected: true},
				{Text: "cut", Expected: true},
				{Text: "cart", Expected: false},
				{Text: "ct", Expected: false},
			},
		},
		{
			Title:       "Simple Character Classes",
			Description: "Character classes [] match any single character within the brackets.",
			Task:        "Write a pattern that matches 'cat' and 'bat' but not 'rat'",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "bat", Expected: true},
				{Text: "rat", Expected: false},
			},
		},
		{
			Title:       "Negated Character Classes",
			Description: "Adding ^ after the opening bracket [^...] matches any character NOT in the brackets.",
			Task:        "Write a pattern that matches 'cat' and 'bat' but NOT 'rat' or 'mat' using negation",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "bat", Expected: true},
				{Text: "rat", Expected: false},
				{Text: "mat", Expected: false},
			},
		},
		{
			Title:       "Character Ranges",
			Description: "Use a hyphen inside [] to specify a range of characters, like [a-z] for lowercase letters.",
			Task:        "Write a pattern that matches any three-letter word using lowercase letters",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "dog", Expected: true},
				{Text: "bat", Expected: true},
				{Text: "rat", Expected: true},
				{Text: "ct", Expected: false},
			},
		},
		{
			Title:       "Multiple Ranges",
			Description: "Combine multiple ranges like [A-Za-z] for all letters or [0-9] for digits.\n\nTest text:\nA12\nb45\nZ90\n123\nabc\nA1\nABC",
			Task:        "Write a pattern that matches words starting with any letter (upper or lower) followed by two digits",
			TestCases: []models.TestCase{
				{Text: "A12", Expected: true},
				{Text: "b45", Expected: true},
				{Text: "Z90", Expected: true},
				{Text: "123", Expected: false},
				{Text: "abc", Expected: false},
				{Text: "A1", Expected: false},
				{Text: "ABC", Expected: false},
			},
		},
		{
			Title:       "Optional Characters",
			Description: "The ? makes the preceding character optional (zero or one occurrence).",
			Task:        "Write a pattern that matches both 'color' and 'colour'",
			TestCases: []models.TestCase{
				{Text: "color", Expected: true},
				{Text: "colour", Expected: true},
				{Text: "colouur", Expected: false},
				{Text: "colouurr", Expected: false},
			},
		},
		{
			Title:       "Zero or More",
			Description: "The * means zero or more occurrences of the preceding character.",
			Task:        "Write a pattern that matches 'ca', 'cat', 'catt', 'cattt', etc.",
			TestCases: []models.TestCase{
				{Text: "ca", Expected: true},
				{Text: "cat", Expected: true},
				{Text: "catt", Expected: true},
				{Text: "cattt", Expected: true},
				{Text: "ct", Expected: false},
			},
		},
		{
			Title:       "One or More",
			Description: "The + means one or more occurrences of the preceding character.",
			Task:        "Write a pattern that matches 'cat', 'catt', 'cattt', etc. (but not 'ca')",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "catt", Expected: true},
				{Text: "cattt", Expected: true},
				{Text: "ca", Expected: false},
			},
		},
		{
			Title:       "Exact Count",
			Description: "Use {n} to match exactly n occurrences of the preceding character. Use ^ and $ to match the entire string.\n\nTest text:\naaab\naab\naaaab\nab",
			Task:        "Write a pattern that matches exactly three 'a's followed by 'b' (and nothing else)",
			TestCases: []models.TestCase{
				{Text: "aaab", Expected: true},
				{Text: "aab", Expected: false},
				{Text: "aaaab", Expected: false},
				{Text: "ab", Expected: false},
			},
		},
		{
			Title:       "Range of Counts",
			Description: "Use {min,max} to match between min and max occurrences.",
			Task:        "Write a pattern that matches 'ab' with 2 to 4 'b's (abb, abbb, abbbb)",
			TestCases: []models.TestCase{
				{Text: "ab", Expected: false},
				{Text: "abb", Expected: true},
				{Text: "abbb", Expected: true},
				{Text: "abbbb", Expected: true},
			},
		},
		{
			Title:       "Start Anchor",
			Description: "^ matches the start of a line when outside [].\n\nTest text:\nhello\nhello world\nworld hello\nsay hello",
			Task:        "Write a pattern that matches 'hello' only at the start of a line",
			TestCases: []models.TestCase{
				{Text: "hello", Expected: true},
				{Text: "hello world", Expected: true},
				{Text: "world hello", Expected: false},
				{Text: "say hello", Expected: false},
			},
		},
		{
			Title:       "End Anchor",
			Description: "$ matches the end of a line.\n\nTest text:\nworld\nhello world\nworld hello\nworld now",
			Task:        "Write a pattern that matches 'world' only at the end of a line",
			TestCases: []models.TestCase{
				{Text: "world", Expected: true},
				{Text: "hello world", Expected: true},
				{Text: "world hello", Expected: false},
				{Text: "world now", Expected: false},
			},
		},
		{
			Title:       "Word Boundaries",
			Description: "\\b matches a word boundary (start/end of word).\n\nTest text:\ncat\ncats\nscatter\ncat food",
			Task:        "Write a pattern that matches 'cat' as a whole word only",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "cats", Expected: false},
				{Text: "scatter", Expected: false},
				{Text: "cat food", Expected: true},
			},
		},
		{
			Title:       "Grouping",
			Description: "Parentheses () group patterns together and create capturing groups.\n\nTest text:\nha\nhaha\nhahaha\nah",
			Task:        "Write a pattern that matches 'ha' repeated exactly twice ('haha')",
			TestCases: []models.TestCase{
				{Text: "ha", Expected: false},
				{Text: "haha", Expected: true},
				{Text: "hahaha", Expected: false},
				{Text: "ah", Expected: false},
			},
		},
		{
			Title:       "Alternation",
			Description: "The | operator means 'or' and matches either pattern.\n\nTest text:\ncat\ndog\ncatdog\ndog cat",
			Task:        "Write a pattern that matches either 'cat' or 'dog'",
			TestCases: []models.TestCase{
				{Text: "cat", Expected: true},
				{Text: "dog", Expected: true},
				{Text: "catdog", Expected: false},
				{Text: "mouse", Expected: false},
			},
		},
		{
			Title:       "Common Shortcuts",
			Description: "\\d matches any digit [0-9], \\w matches word chars [A-Za-z0-9_], \\s matches whitespace.",
			Task:        "Write a pattern that matches a word character followed by a digit",
			TestCases: []models.TestCase{
				{Text: "a1", Expected: true},
				{Text: "b2", Expected: true},
				{Text: "c3", Expected: true},
				{Text: "d4", Expected: true},
				{Text: "e5", Expected: true},
				{Text: "f6", Expected: true},
				{Text: "g7", Expected: true},
				{Text: "h8", Expected: true},
				{Text: "i9", Expected: true},
				{Text: "j0", Expected: true},
				{Text: "k", Expected: false},
				{Text: "l", Expected: false},
				{Text: "m", Expected: false},
				{Text: "n", Expected: false},
				{Text: "o", Expected: false},
				{Text: "p", Expected: false},
				{Text: "q", Expected: false},
				{Text: "r", Expected: false},
				{Text: "s", Expected: false},
				{Text: "t", Expected: false},
				{Text: "u", Expected: false},
				{Text: "v", Expected: false},
				{Text: "w", Expected: false},
				{Text: "x", Expected: false},
				{Text: "y", Expected: false},
				{Text: "z", Expected: false},
			},
		},
		{
			Title:       "Non-Capturing Groups",
			Description: "(?:...) groups patterns without creating a capturing group.\n\nTest text:\nha\nhaha\nhahaha\nahahah",
			Task:        "Write a pattern using non-capturing group to match 'ha' repeated twice",
			TestCases: []models.TestCase{
				{Text: "ha", Expected: false},
				{Text: "haha", Expected: true},
				{Text: "hahaha", Expected: false},
				{Text: "ahahah", Expected: false},
			},
		},
		{
			Title:       "Escaping Special Characters",
			Description: "To match special characters like ., *, +, ?, |, (, ), [, ], {, }, ^, $ literally, escape them with a backslash \\.\n\nTest text:\ncat*\ncat?\ncat.\ncat",
			Task:        "Write a pattern that matches 'cat*' literally (including the asterisk)",
			TestCases: []models.TestCase{
				{Text: "cat*", Expected: true},
				{Text: "cat", Expected: false},
				{Text: "cattt", Expected: false},
				{Text: "cat?", Expected: false},
			},
		},
		{
			Title:       "Character Class Negation Shortcuts",
			Description: "\\D matches any non-digit [^0-9], \\W matches any non-word char [^A-Za-z0-9_], \\S matches any non-whitespace.\n\nTest text:\na1\n1a\n.!\n  \n\t",
			Task:        "Write a pattern that matches any single non-digit followed by any single digit",
			TestCases: []models.TestCase{
				{Text: "a1", Expected: true},
				{Text: "!2", Expected: true},
				{Text: ".5", Expected: true},
				{Text: "12", Expected: false},
				{Text: "aa", Expected: false},
				{Text: "1a", Expected: false},
			},
		},
		{
			Title:       "Greedy vs Lazy Quantifiers",
			Description: "By default, quantifiers are greedy (match as much as possible). Adding ? after them makes them lazy (match as little as possible).\n\nTest text:\n<tag>value</tag>",
			Task:        "Write a pattern that matches '<' followed by any characters (non-greedy) followed by '>' (should match '<tag>', not '<tag>value</tag>')",
			TestCases: []models.TestCase{
				{Text: "<tag>", Expected: true},
				{Text: "<>", Expected: true},
				{Text: "tag", Expected: false},
				{Text: "<tag>value</tag>", Expected: true},
			},
		},
		{
			Title:       "Multiline Mode",
			Description: "In multiline mode (?m), ^ and $ match the start/end of each line rather than the whole string.\n\nTest text:\nfirst line\nsecond line\nlast line",
			Task:        "Write a pattern in multiline mode that matches 'line' at the end of any line",
			TestCases: []models.TestCase{
				{Text: "first line\n", Expected: true},
				{Text: "line\n", Expected: true},
				{Text: "line break", Expected: false},
				{Text: "inline\n", Expected: false},
			},
		},
		{
			Title:       "Case Insensitive Matching",
			Description: "(?i) at the start of pattern makes the match case-insensitive.\n\nTest text:\nCAT\ncat\nCat\ncAt",
			Task:        "Write a case-insensitive pattern that matches 'cat' in any letter case",
			TestCases: []models.TestCase{
				{Text: "CAT", Expected: true},
				{Text: "cat", Expected: true},
				{Text: "Cat", Expected: true},
				{Text: "cAt", Expected: true},
				{Text: "dog", Expected: false},
			},
		},
		{
			Title:       "Unicode Categories",
			Description: "\\p{L} matches any kind of letter from any language. \\p{N} matches any kind of numeric character.\n\nTest text:\nA1\nБ2\n漢3\n🎯4",
			Task:        "Write a pattern that matches any letter (from any language) followed by a number",
			TestCases: []models.TestCase{
				{Text: "A1", Expected: true},
				{Text: "Б2", Expected: true},
				{Text: "漢3", Expected: true},
				{Text: "1A", Expected: false},
				{Text: "AA", Expected: false},
				{Text: "11", Expected: false},
				{Text: "🎯4", Expected: false},
			},
		},
		{
			Title:       "Backreferences",
			Description: "Capturing groups can be referenced later in the pattern with \\1, \\2, etc.\n\nTest text:\naa\nbb\nab\ncc",
			Task:        "Write a pattern that matches any letter followed by the same letter (matches 'aa', 'bb', etc.)",
			TestCases: []models.TestCase{
				{Text: "aa", Expected: true},
				{Text: "bb", Expected: true},
				{Text: "cc", Expected: true},
				{Text: "ab", Expected: false},
				{Text: "a", Expected: false},
			},
		},
		{
			Title:       "Named Groups",
			Description: "(?P<name>pattern) creates a named group. \\k<name> references it.\n\nTest text:\ncat=cat\ndog=cat\ncat=dog",
			Task:        "Write a pattern with a named group 'word' that matches 'word=word' (same word before and after equals)",
			TestCases: []models.TestCase{
				{Text: "cat=cat", Expected: true},
				{Text: "dog=dog", Expected: true},
				{Text: "cat=dog", Expected: false},
				{Text: "dog=cat", Expected: false},
			},
		},
		{
			Title:       "Whitespace Patterns",
			Description: "\\t matches tab, \\n matches newline, \\r matches carriage return, \\s matches any whitespace.\n\nTest text:\nword word\nword\tword\nword\nword",
			Task:        "Write a pattern that matches 'word' followed by a tab (\\t) followed by 'word'",
			TestCases: []models.TestCase{
				{Text: "word\tword", Expected: true},
				{Text: "word word", Expected: false},
				{Text: "word\nword", Expected: false},
				{Text: "word", Expected: false},
			},
		},
	}
}

func GetPracticeProblems() []models.PracticeProblem {
	return []models.PracticeProblem{
		{
			Title:       "IP Address",
			Description: "Write a pattern to match IPv4 addresses.\nEach number should be between 0-255.",
			Examples:    "Valid: 192.168.1.1, 10.0.0.0\nInvalid: 256.1.2.3, 1.2.3.4.5",
			TestCases: []models.TestCase{
				{Text: "192.168.1.1", Expected: true},
				{Text: "10.0.0.0", Expected: true},
				{Text: "256.1.2.3", Expected: false},
				{Text: "1.2.3.4.5", Expected: false},
			},
		},
		{
			Title:       "HTML Color Codes",
			Description: "Write a pattern to match HTML hex color codes.",
			Examples:    "Valid: #FFF, #123456\nInvalid: #XYZ, #12345",
			TestCases: []models.TestCase{
				{Text: "#FFF", Expected: true},
				{Text: "#123456", Expected: true},
				{Text: "#XYZ", Expected: false},
				{Text: "#12345", Expected: false},
			},
		},
		{
			Title:       "Time Format",
			Description: "Write a pattern to match 24-hour time format (HH:MM).",
			Examples:    "Valid: 13:45, 09:30\nInvalid: 24:00, 12:60",
			TestCases: []models.TestCase{
				{Text: "13:45", Expected: true},
				{Text: "09:30", Expected: true},
				{Text: "24:00", Expected: false},
				{Text: "12:60", Expected: false},
			},
		},
		{
			Title:       "Variable Names",
			Description: "Write a pattern to validate JavaScript variable names.\nMust start with letter/$/_, followed by letters/numbers/$/_",
			Examples:    "Valid: myVar, $price, _hidden\nInvalid: 123var, my-var, class@",
			TestCases: []models.TestCase{
				{Text: "myVar", Expected: true},
				{Text: "$price", Expected: true},
				{Text: "_hidden", Expected: true},
				{Text: "123var", Expected: false},
				{Text: "my-var", Expected: false},
				{Text: "class@", Expected: false},
			},
		},
		{
			Title:       "Version Numbers",
			Description: "Write a pattern to match semantic version numbers (x.y.z format).\nEach number can have 1-3 digits.",
			Examples:    "Valid: 1.0.0, 2.10.5, 10.20.30\nInvalid: 1.0, 1.0.0.0, 01.02.03",
			TestCases: []models.TestCase{
				{Text: "1.0.0", Expected: true},
				{Text: "2.10.5", Expected: true},
				{Text: "10.20.30", Expected: true},
				{Text: "1.0", Expected: false},
				{Text: "1.0.0.0", Expected: false},
				{Text: "01.02.03", Expected: false},
			},
		},
		{
			Title:       "Log Level Extraction",
			Description: "Write a pattern to match log levels in brackets at start of line.\nShould extract: [ERROR], [INFO], [WARN], [DEBUG]",
			Examples:    "Valid: [ERROR] Failed to connect\nInvalid: [FATAL] Error occurred",
			TestCases: []models.TestCase{
				{Text: "[ERROR] Failed to connect", Expected: true},
				{Text: "[INFO] Server started", Expected: true},
				{Text: "[WARN] Disk space low", Expected: true},
				{Text: "[DEBUG] Processing request", Expected: true},
				{Text: "[FATAL] Error occurred", Expected: false},
				{Text: "ERROR: System crash", Expected: false},
			},
		},
		{
			Title:       "File Extensions",
			Description: "Write a pattern to match common web file extensions at end of string.\nMatch: .jpg, .jpeg, .png, .gif, .webp",
			Examples:    "Valid: photo.jpg, image.png\nInvalid: document.pdf, script.js",
			TestCases: []models.TestCase{
				{Text: "photo.jpg", Expected: true},
				{Text: "image.jpeg", Expected: true},
				{Text: "icon.png", Expected: true},
				{Text: "animation.gif", Expected: true},
				{Text: "photo.webp", Expected: true},
				{Text: "document.pdf", Expected: false},
				{Text: "script.js", Expected: false},
			},
		},
		{
			Title:       "URL Path Parameters",
			Description: "Write a pattern to match URL path parameters.\nFormat: /:paramName/",
			Examples:    "Valid: /users/:id/profile, /:category/:productId\nInvalid: /users/123, /:1id/",
			TestCases: []models.TestCase{
				{Text: "/users/:id/profile", Expected: true},
				{Text: "/:category/:productId", Expected: true},
				{Text: "/users/123", Expected: false},
				{Text: "/:1id/", Expected: false},
			},
		},
		{
			Title:       "CSS Color Values",
			Description: "Write a pattern to match CSS RGB color values.\nFormat: rgb(0-255, 0-255, 0-255)",
			Examples:    "Valid: rgb(255, 128, 0), rgb(0, 0, 0)\nInvalid: rgb(300, 0, 0), rgb(0,0,0)",
			TestCases: []models.TestCase{
				{Text: "rgb(255, 128, 0)", Expected: true},
				{Text: "rgb(0, 0, 0)", Expected: true},
				{Text: "rgb(300, 0, 0)", Expected: false},
				{Text: "rgb(0,0,0)", Expected: false},
			},
		},
		{
			Title:       "JSON Property",
			Description: "Write a pattern to match JSON property names and values.\nFormat: \"propertyName\": value",
			Examples:    "Valid: \"name\": \"John\", \"age\": 30\nInvalid: name: \"John\", \"age\":30",
			TestCases: []models.TestCase{
				{Text: "\"name\": \"John\"", Expected: true},
				{Text: "\"age\": 30", Expected: true},
				{Text: "name: \"John\"", Expected: false},
				{Text: "\"age\":30", Expected: false},
			},
		},
		{
			Title:       "Git Commit Hash",
			Description: "Write a pattern to match Git commit hashes.\n40 characters of hexadecimal (short form: 7+ chars)",
			Examples:    "Valid: a1b2c3d4e5f6..., 1234567\nInvalid: xyz123, 123456",
			TestCases: []models.TestCase{
				{Text: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0", Expected: true},
				{Text: "1234567", Expected: true},
				{Text: "xyz123", Expected: false},
				{Text: "123456", Expected: false},
			},
		},
		{
			Title:       "Docker Image Tags",
			Description: "Write a pattern to match Docker image tags.\nFormat: repository/image:tag",
			Examples:    "Valid: ubuntu:20.04, nginx:latest\nInvalid: ubuntu:, :latest",
			TestCases: []models.TestCase{
				{Text: "ubuntu:20.04", Expected: true},
				{Text: "nginx:latest", Expected: true},
				{Text: "mysql:5.7.33", Expected: true},
				{Text: "ubuntu:", Expected: false},
				{Text: ":latest", Expected: false},
			},
		},
		{
			Title:       "Function Parameters",
			Description: "Write a pattern to match function parameters in JavaScript.\nMatch parameters between parentheses.",
			Examples:    "Valid: (x, y), (name = 'default')\nInvalid: (), (x,y)",
			TestCases: []models.TestCase{
				{Text: "(x, y)", Expected: true},
				{Text: "(name = 'default')", Expected: true},
				{Text: "()", Expected: false},
				{Text: "(x,y)", Expected: false},
			},
		},
		{
			Title:       "Database Connection String",
			Description: "Write a pattern to match PostgreSQL connection strings.\nFormat: postgresql://user:pass@host:port/dbname",
			Examples:    "Valid: postgresql://user:pass@localhost:5432/mydb\nInvalid: mysql://user:pass@localhost/db",
			TestCases: []models.TestCase{
				{Text: "postgresql://user:pass@localhost:5432/mydb", Expected: true},
				{Text: "postgresql://admin:secret@db.host:5432/prod", Expected: true},
				{Text: "mysql://user:pass@localhost/db", Expected: false},
				{Text: "postgresql://user@localhost/db", Expected: false},
			},
		},
		{
			Title:       "API Endpoints",
			Description: "Write a pattern to match RESTful API endpoints.\nFormat: /api/v1/resource/:id",
			Examples:    "Valid: /api/v1/users/123, /api/v2/products\nInvalid: /api/v0/users, /api/users",
			TestCases: []models.TestCase{
				{Text: "/api/v1/users/123", Expected: true},
				{Text: "/api/v2/products", Expected: true},
				{Text: "/api/v0/users", Expected: false},
				{Text: "/api/users", Expected: false},
			},
		},
		{
			Title:       "Environment Variables",
			Description: "Write a pattern to match environment variables in shell scripts.\nFormat: $VARIABLE or ${VARIABLE}",
			Examples:    "Valid: $HOME, ${PATH}\nInvalid: $123, ${1VAR}",
			TestCases: []models.TestCase{
				{Text: "$HOME", Expected: true},
				{Text: "${PATH}", Expected: true},
				{Text: "$123", Expected: false},
				{Text: "${1VAR}", Expected: false},
			},
		},
		{
			Title:       "HTML Data Attributes",
			Description: "Write a pattern to match HTML5 data attributes.\nFormat: data-* attributes",
			Examples:    "Valid: data-user-id, data-color\nInvalid: data-, data@test",
			TestCases: []models.TestCase{
				{Text: "data-user-id", Expected: true},
				{Text: "data-color", Expected: true},
				{Text: "data-", Expected: false},
				{Text: "data@test", Expected: false},
			},
		},
		{
			Title:       "CSS Media Queries",
			Description: "Write a pattern to match CSS media query breakpoints.\nFormat: @media (min-width: XXXpx)",
			Examples:    "Valid: @media (min-width: 768px)\nInvalid: @media screen, @media (width: 768px)",
			TestCases: []models.TestCase{
				{Text: "@media (min-width: 768px)", Expected: true},
				{Text: "@media (min-width: 1200px)", Expected: true},
				{Text: "@media screen", Expected: false},
				{Text: "@media (width: 768px)", Expected: false},
			},
		},
		{
			Title:       "Package Version Range",
			Description: "Write a pattern to match npm package version ranges.\nFormat: ^1.2.3, ~1.2.3, >=1.2.3",
			Examples:    "Valid: ^1.0.0, ~2.1.0, >=3.0.0\nInvalid: >>1.0.0, ^1.0",
			TestCases: []models.TestCase{
				{Text: "^1.0.0", Expected: true},
				{Text: "~2.1.0", Expected: true},
				{Text: ">=3.0.0", Expected: true},
				{Text: ">>1.0.0", Expected: false},
				{Text: "^1.0", Expected: false},
			},
		},
		{
			Title:       "Base64 Strings",
			Description: "Write a pattern to match Base64 encoded strings.\nMust be multiple of 4 chars, using A-Z, a-z, 0-9, +, /, =",
			Examples:    "Valid: SGVsbG8=, YWJjZA==\nInvalid: abc=, Hello!",
			TestCases: []models.TestCase{
				{Text: "SGVsbG8=", Expected: true},
				{Text: "YWJjZA==", Expected: true},
				{Text: "abc=", Expected: false},
				{Text: "Hello!", Expected: false},
			},
		},
		{
			Title:       "JWT Token",
			Description: "Write a pattern to match JWT tokens.\nThree Base64 sections separated by dots",
			Examples:    "Valid: eyJhbGci.eyJzdWIi.TJVA95Or\nInvalid: abc.def, a.b.c.d",
			TestCases: []models.TestCase{
				{Text: "eyJhbGci.eyJzdWIi.TJVA95Or", Expected: true},
				{Text: "header.payload.signature", Expected: true},
				{Text: "abc.def", Expected: false},
				{Text: "a.b.c.d", Expected: false},
			},
		},
		{
			Title:       "MongoDB ObjectId",
			Description: "Write a pattern to match MongoDB ObjectId.\n24 character hex string",
			Examples:    "Valid: 507f1f77bcf86cd799439011\nInvalid: 507f1f77bcf86cd79943901, 507f1f77bcf86cd7994390111",
			TestCases: []models.TestCase{
				{Text: "507f1f77bcf86cd799439011", Expected: true},
				{Text: "abcdef0123456789abcdef01", Expected: true},
				{Text: "507f1f77bcf86cd79943901", Expected: false},
				{Text: "507f1f77bcf86cd7994390111", Expected: false},
			},
		},
		{
			Title:       "Kubernetes Resource Names",
			Description: "Write a pattern to match valid Kubernetes resource names.\nLowercase, numbers, -, up to 253 chars",
			Examples:    "Valid: my-app-pod, nginx-123\nInvalid: My_Pod, pod@123",
			TestCases: []models.TestCase{
				{Text: "my-app-pod", Expected: true},
				{Text: "nginx-123", Expected: true},
				{Text: "My_Pod", Expected: false},
				{Text: "pod@123", Expected: false},
			},
		},
		{
			Title:       "GraphQL Fields",
			Description: "Write a pattern to match GraphQL field selections.\nFormat: fieldName or fieldName { subfield }",
			Examples:    "Valid: userName, user { id name }\nInvalid: 123field, user{id}",
			TestCases: []models.TestCase{
				{Text: "userName", Expected: true},
				{Text: "user { id name }", Expected: true},
				{Text: "123field", Expected: false},
				{Text: "user{id}", Expected: false},
			},
		},
		{
			Title:       "CI/CD Variables",
			Description: "Write a pattern to match CI/CD pipeline variables.\nFormat: ${VAR_NAME} or $VAR_NAME",
			Examples:    "Valid: ${BUILD_ID}, $DEPLOY_ENV\nInvalid: $123, ${1BUILD}",
			TestCases: []models.TestCase{
				{Text: "${BUILD_ID}", Expected: true},
				{Text: "$DEPLOY_ENV", Expected: true},
				{Text: "$123", Expected: false},
				{Text: "${1BUILD}", Expected: false},
			},
		},
	}
}